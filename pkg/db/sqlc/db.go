// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.batchCreateValidatorSnapshotsStmt, err = db.PrepareContext(ctx, batchCreateValidatorSnapshots); err != nil {
		return nil, fmt.Errorf("error preparing query BatchCreateValidatorSnapshots: %w", err)
	}
	if q.createConsensusEventStmt, err = db.PrepareContext(ctx, createConsensusEvent); err != nil {
		return nil, fmt.Errorf("error preparing query CreateConsensusEvent: %w", err)
	}
	if q.createHeightStmt, err = db.PrepareContext(ctx, createHeight); err != nil {
		return nil, fmt.Errorf("error preparing query CreateHeight: %w", err)
	}
	if q.createRoundStmt, err = db.PrepareContext(ctx, createRound); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRound: %w", err)
	}
	if q.createValidatorStmt, err = db.PrepareContext(ctx, createValidator); err != nil {
		return nil, fmt.Errorf("error preparing query CreateValidator: %w", err)
	}
	if q.createValidatorSnapshotStmt, err = db.PrepareContext(ctx, createValidatorSnapshot); err != nil {
		return nil, fmt.Errorf("error preparing query CreateValidatorSnapshot: %w", err)
	}
	if q.createVoteStmt, err = db.PrepareContext(ctx, createVote); err != nil {
		return nil, fmt.Errorf("error preparing query CreateVote: %w", err)
	}
	if q.deleteConsensusEventsOlderThanStmt, err = db.PrepareContext(ctx, deleteConsensusEventsOlderThan); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteConsensusEventsOlderThan: %w", err)
	}
	if q.deleteHeightsOlderThanStmt, err = db.PrepareContext(ctx, deleteHeightsOlderThan); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteHeightsOlderThan: %w", err)
	}
	if q.deleteRoundsOlderThanStmt, err = db.PrepareContext(ctx, deleteRoundsOlderThan); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRoundsOlderThan: %w", err)
	}
	if q.deleteValidatorStmt, err = db.PrepareContext(ctx, deleteValidator); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteValidator: %w", err)
	}
	if q.deleteValidatorSnapshotsOlderThanStmt, err = db.PrepareContext(ctx, deleteValidatorSnapshotsOlderThan); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteValidatorSnapshotsOlderThan: %w", err)
	}
	if q.deleteVotesOlderThanStmt, err = db.PrepareContext(ctx, deleteVotesOlderThan); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteVotesOlderThan: %w", err)
	}
	if q.getConsensusEventStmt, err = db.PrepareContext(ctx, getConsensusEvent); err != nil {
		return nil, fmt.Errorf("error preparing query GetConsensusEvent: %w", err)
	}
	if q.getConsensusEventsByTypeStmt, err = db.PrepareContext(ctx, getConsensusEventsByType); err != nil {
		return nil, fmt.Errorf("error preparing query GetConsensusEventsByType: %w", err)
	}
	if q.getConsensusEventsForHeightStmt, err = db.PrepareContext(ctx, getConsensusEventsForHeight); err != nil {
		return nil, fmt.Errorf("error preparing query GetConsensusEventsForHeight: %w", err)
	}
	if q.getConsensusEventsForRoundStmt, err = db.PrepareContext(ctx, getConsensusEventsForRound); err != nil {
		return nil, fmt.Errorf("error preparing query GetConsensusEventsForRound: %w", err)
	}
	if q.getHeightStmt, err = db.PrepareContext(ctx, getHeight); err != nil {
		return nil, fmt.Errorf("error preparing query GetHeight: %w", err)
	}
	if q.getHeightsStmt, err = db.PrepareContext(ctx, getHeights); err != nil {
		return nil, fmt.Errorf("error preparing query GetHeights: %w", err)
	}
	if q.getLatestHeightStmt, err = db.PrepareContext(ctx, getLatestHeight); err != nil {
		return nil, fmt.Errorf("error preparing query GetLatestHeight: %w", err)
	}
	if q.getRecentConsensusEventsStmt, err = db.PrepareContext(ctx, getRecentConsensusEvents); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecentConsensusEvents: %w", err)
	}
	if q.getRecentRoundsStmt, err = db.PrepareContext(ctx, getRecentRounds); err != nil {
		return nil, fmt.Errorf("error preparing query GetRecentRounds: %w", err)
	}
	if q.getRoundStmt, err = db.PrepareContext(ctx, getRound); err != nil {
		return nil, fmt.Errorf("error preparing query GetRound: %w", err)
	}
	if q.getRoundsForHeightStmt, err = db.PrepareContext(ctx, getRoundsForHeight); err != nil {
		return nil, fmt.Errorf("error preparing query GetRoundsForHeight: %w", err)
	}
	if q.getRoundsInRangeStmt, err = db.PrepareContext(ctx, getRoundsInRange); err != nil {
		return nil, fmt.Errorf("error preparing query GetRoundsInRange: %w", err)
	}
	if q.getValidatorStmt, err = db.PrepareContext(ctx, getValidator); err != nil {
		return nil, fmt.Errorf("error preparing query GetValidator: %w", err)
	}
	if q.getValidatorSnapshotStmt, err = db.PrepareContext(ctx, getValidatorSnapshot); err != nil {
		return nil, fmt.Errorf("error preparing query GetValidatorSnapshot: %w", err)
	}
	if q.getValidatorSnapshotsForHeightStmt, err = db.PrepareContext(ctx, getValidatorSnapshotsForHeight); err != nil {
		return nil, fmt.Errorf("error preparing query GetValidatorSnapshotsForHeight: %w", err)
	}
	if q.getValidatorSnapshotsForValidatorStmt, err = db.PrepareContext(ctx, getValidatorSnapshotsForValidator); err != nil {
		return nil, fmt.Errorf("error preparing query GetValidatorSnapshotsForValidator: %w", err)
	}
	if q.getValidatorsStmt, err = db.PrepareContext(ctx, getValidators); err != nil {
		return nil, fmt.Errorf("error preparing query GetValidators: %w", err)
	}
	if q.getValidatorsByHeightStmt, err = db.PrepareContext(ctx, getValidatorsByHeight); err != nil {
		return nil, fmt.Errorf("error preparing query GetValidatorsByHeight: %w", err)
	}
	if q.getVoteStmt, err = db.PrepareContext(ctx, getVote); err != nil {
		return nil, fmt.Errorf("error preparing query GetVote: %w", err)
	}
	if q.getVotesByTypeStmt, err = db.PrepareContext(ctx, getVotesByType); err != nil {
		return nil, fmt.Errorf("error preparing query GetVotesByType: %w", err)
	}
	if q.getVotesForHeightStmt, err = db.PrepareContext(ctx, getVotesForHeight); err != nil {
		return nil, fmt.Errorf("error preparing query GetVotesForHeight: %w", err)
	}
	if q.getVotesForRoundStmt, err = db.PrepareContext(ctx, getVotesForRound); err != nil {
		return nil, fmt.Errorf("error preparing query GetVotesForRound: %w", err)
	}
	if q.getVotesForValidatorStmt, err = db.PrepareContext(ctx, getVotesForValidator); err != nil {
		return nil, fmt.Errorf("error preparing query GetVotesForValidator: %w", err)
	}
	if q.getVotingPowerForRoundStmt, err = db.PrepareContext(ctx, getVotingPowerForRound); err != nil {
		return nil, fmt.Errorf("error preparing query GetVotingPowerForRound: %w", err)
	}
	if q.updateRoundStepStmt, err = db.PrepareContext(ctx, updateRoundStep); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRoundStep: %w", err)
	}
	if q.updateValidatorStmt, err = db.PrepareContext(ctx, updateValidator); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateValidator: %w", err)
	}
	if q.upsertHeightStmt, err = db.PrepareContext(ctx, upsertHeight); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertHeight: %w", err)
	}
	if q.upsertRoundStmt, err = db.PrepareContext(ctx, upsertRound); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertRound: %w", err)
	}
	if q.upsertValidatorStmt, err = db.PrepareContext(ctx, upsertValidator); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertValidator: %w", err)
	}
	if q.upsertValidatorSnapshotStmt, err = db.PrepareContext(ctx, upsertValidatorSnapshot); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertValidatorSnapshot: %w", err)
	}
	if q.upsertVoteStmt, err = db.PrepareContext(ctx, upsertVote); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertVote: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.batchCreateValidatorSnapshotsStmt != nil {
		if cerr := q.batchCreateValidatorSnapshotsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing batchCreateValidatorSnapshotsStmt: %w", cerr)
		}
	}
	if q.createConsensusEventStmt != nil {
		if cerr := q.createConsensusEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createConsensusEventStmt: %w", cerr)
		}
	}
	if q.createHeightStmt != nil {
		if cerr := q.createHeightStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createHeightStmt: %w", cerr)
		}
	}
	if q.createRoundStmt != nil {
		if cerr := q.createRoundStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRoundStmt: %w", cerr)
		}
	}
	if q.createValidatorStmt != nil {
		if cerr := q.createValidatorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createValidatorStmt: %w", cerr)
		}
	}
	if q.createValidatorSnapshotStmt != nil {
		if cerr := q.createValidatorSnapshotStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createValidatorSnapshotStmt: %w", cerr)
		}
	}
	if q.createVoteStmt != nil {
		if cerr := q.createVoteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createVoteStmt: %w", cerr)
		}
	}
	if q.deleteConsensusEventsOlderThanStmt != nil {
		if cerr := q.deleteConsensusEventsOlderThanStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteConsensusEventsOlderThanStmt: %w", cerr)
		}
	}
	if q.deleteHeightsOlderThanStmt != nil {
		if cerr := q.deleteHeightsOlderThanStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteHeightsOlderThanStmt: %w", cerr)
		}
	}
	if q.deleteRoundsOlderThanStmt != nil {
		if cerr := q.deleteRoundsOlderThanStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRoundsOlderThanStmt: %w", cerr)
		}
	}
	if q.deleteValidatorStmt != nil {
		if cerr := q.deleteValidatorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteValidatorStmt: %w", cerr)
		}
	}
	if q.deleteValidatorSnapshotsOlderThanStmt != nil {
		if cerr := q.deleteValidatorSnapshotsOlderThanStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteValidatorSnapshotsOlderThanStmt: %w", cerr)
		}
	}
	if q.deleteVotesOlderThanStmt != nil {
		if cerr := q.deleteVotesOlderThanStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteVotesOlderThanStmt: %w", cerr)
		}
	}
	if q.getConsensusEventStmt != nil {
		if cerr := q.getConsensusEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getConsensusEventStmt: %w", cerr)
		}
	}
	if q.getConsensusEventsByTypeStmt != nil {
		if cerr := q.getConsensusEventsByTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getConsensusEventsByTypeStmt: %w", cerr)
		}
	}
	if q.getConsensusEventsForHeightStmt != nil {
		if cerr := q.getConsensusEventsForHeightStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getConsensusEventsForHeightStmt: %w", cerr)
		}
	}
	if q.getConsensusEventsForRoundStmt != nil {
		if cerr := q.getConsensusEventsForRoundStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getConsensusEventsForRoundStmt: %w", cerr)
		}
	}
	if q.getHeightStmt != nil {
		if cerr := q.getHeightStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHeightStmt: %w", cerr)
		}
	}
	if q.getHeightsStmt != nil {
		if cerr := q.getHeightsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHeightsStmt: %w", cerr)
		}
	}
	if q.getLatestHeightStmt != nil {
		if cerr := q.getLatestHeightStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLatestHeightStmt: %w", cerr)
		}
	}
	if q.getRecentConsensusEventsStmt != nil {
		if cerr := q.getRecentConsensusEventsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecentConsensusEventsStmt: %w", cerr)
		}
	}
	if q.getRecentRoundsStmt != nil {
		if cerr := q.getRecentRoundsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRecentRoundsStmt: %w", cerr)
		}
	}
	if q.getRoundStmt != nil {
		if cerr := q.getRoundStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRoundStmt: %w", cerr)
		}
	}
	if q.getRoundsForHeightStmt != nil {
		if cerr := q.getRoundsForHeightStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRoundsForHeightStmt: %w", cerr)
		}
	}
	if q.getRoundsInRangeStmt != nil {
		if cerr := q.getRoundsInRangeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRoundsInRangeStmt: %w", cerr)
		}
	}
	if q.getValidatorStmt != nil {
		if cerr := q.getValidatorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getValidatorStmt: %w", cerr)
		}
	}
	if q.getValidatorSnapshotStmt != nil {
		if cerr := q.getValidatorSnapshotStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getValidatorSnapshotStmt: %w", cerr)
		}
	}
	if q.getValidatorSnapshotsForHeightStmt != nil {
		if cerr := q.getValidatorSnapshotsForHeightStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getValidatorSnapshotsForHeightStmt: %w", cerr)
		}
	}
	if q.getValidatorSnapshotsForValidatorStmt != nil {
		if cerr := q.getValidatorSnapshotsForValidatorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getValidatorSnapshotsForValidatorStmt: %w", cerr)
		}
	}
	if q.getValidatorsStmt != nil {
		if cerr := q.getValidatorsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getValidatorsStmt: %w", cerr)
		}
	}
	if q.getValidatorsByHeightStmt != nil {
		if cerr := q.getValidatorsByHeightStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getValidatorsByHeightStmt: %w", cerr)
		}
	}
	if q.getVoteStmt != nil {
		if cerr := q.getVoteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getVoteStmt: %w", cerr)
		}
	}
	if q.getVotesByTypeStmt != nil {
		if cerr := q.getVotesByTypeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getVotesByTypeStmt: %w", cerr)
		}
	}
	if q.getVotesForHeightStmt != nil {
		if cerr := q.getVotesForHeightStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getVotesForHeightStmt: %w", cerr)
		}
	}
	if q.getVotesForRoundStmt != nil {
		if cerr := q.getVotesForRoundStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getVotesForRoundStmt: %w", cerr)
		}
	}
	if q.getVotesForValidatorStmt != nil {
		if cerr := q.getVotesForValidatorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getVotesForValidatorStmt: %w", cerr)
		}
	}
	if q.getVotingPowerForRoundStmt != nil {
		if cerr := q.getVotingPowerForRoundStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getVotingPowerForRoundStmt: %w", cerr)
		}
	}
	if q.updateRoundStepStmt != nil {
		if cerr := q.updateRoundStepStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRoundStepStmt: %w", cerr)
		}
	}
	if q.updateValidatorStmt != nil {
		if cerr := q.updateValidatorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateValidatorStmt: %w", cerr)
		}
	}
	if q.upsertHeightStmt != nil {
		if cerr := q.upsertHeightStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertHeightStmt: %w", cerr)
		}
	}
	if q.upsertRoundStmt != nil {
		if cerr := q.upsertRoundStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertRoundStmt: %w", cerr)
		}
	}
	if q.upsertValidatorStmt != nil {
		if cerr := q.upsertValidatorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertValidatorStmt: %w", cerr)
		}
	}
	if q.upsertValidatorSnapshotStmt != nil {
		if cerr := q.upsertValidatorSnapshotStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertValidatorSnapshotStmt: %w", cerr)
		}
	}
	if q.upsertVoteStmt != nil {
		if cerr := q.upsertVoteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertVoteStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                    DBTX
	tx                                    *sql.Tx
	batchCreateValidatorSnapshotsStmt     *sql.Stmt
	createConsensusEventStmt              *sql.Stmt
	createHeightStmt                      *sql.Stmt
	createRoundStmt                       *sql.Stmt
	createValidatorStmt                   *sql.Stmt
	createValidatorSnapshotStmt           *sql.Stmt
	createVoteStmt                        *sql.Stmt
	deleteConsensusEventsOlderThanStmt    *sql.Stmt
	deleteHeightsOlderThanStmt            *sql.Stmt
	deleteRoundsOlderThanStmt             *sql.Stmt
	deleteValidatorStmt                   *sql.Stmt
	deleteValidatorSnapshotsOlderThanStmt *sql.Stmt
	deleteVotesOlderThanStmt              *sql.Stmt
	getConsensusEventStmt                 *sql.Stmt
	getConsensusEventsByTypeStmt          *sql.Stmt
	getConsensusEventsForHeightStmt       *sql.Stmt
	getConsensusEventsForRoundStmt        *sql.Stmt
	getHeightStmt                         *sql.Stmt
	getHeightsStmt                        *sql.Stmt
	getLatestHeightStmt                   *sql.Stmt
	getRecentConsensusEventsStmt          *sql.Stmt
	getRecentRoundsStmt                   *sql.Stmt
	getRoundStmt                          *sql.Stmt
	getRoundsForHeightStmt                *sql.Stmt
	getRoundsInRangeStmt                  *sql.Stmt
	getValidatorStmt                      *sql.Stmt
	getValidatorSnapshotStmt              *sql.Stmt
	getValidatorSnapshotsForHeightStmt    *sql.Stmt
	getValidatorSnapshotsForValidatorStmt *sql.Stmt
	getValidatorsStmt                     *sql.Stmt
	getValidatorsByHeightStmt             *sql.Stmt
	getVoteStmt                           *sql.Stmt
	getVotesByTypeStmt                    *sql.Stmt
	getVotesForHeightStmt                 *sql.Stmt
	getVotesForRoundStmt                  *sql.Stmt
	getVotesForValidatorStmt              *sql.Stmt
	getVotingPowerForRoundStmt            *sql.Stmt
	updateRoundStepStmt                   *sql.Stmt
	updateValidatorStmt                   *sql.Stmt
	upsertHeightStmt                      *sql.Stmt
	upsertRoundStmt                       *sql.Stmt
	upsertValidatorStmt                   *sql.Stmt
	upsertValidatorSnapshotStmt           *sql.Stmt
	upsertVoteStmt                        *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                    tx,
		tx:                                    tx,
		batchCreateValidatorSnapshotsStmt:     q.batchCreateValidatorSnapshotsStmt,
		createConsensusEventStmt:              q.createConsensusEventStmt,
		createHeightStmt:                      q.createHeightStmt,
		createRoundStmt:                       q.createRoundStmt,
		createValidatorStmt:                   q.createValidatorStmt,
		createValidatorSnapshotStmt:           q.createValidatorSnapshotStmt,
		createVoteStmt:                        q.createVoteStmt,
		deleteConsensusEventsOlderThanStmt:    q.deleteConsensusEventsOlderThanStmt,
		deleteHeightsOlderThanStmt:            q.deleteHeightsOlderThanStmt,
		deleteRoundsOlderThanStmt:             q.deleteRoundsOlderThanStmt,
		deleteValidatorStmt:                   q.deleteValidatorStmt,
		deleteValidatorSnapshotsOlderThanStmt: q.deleteValidatorSnapshotsOlderThanStmt,
		deleteVotesOlderThanStmt:              q.deleteVotesOlderThanStmt,
		getConsensusEventStmt:                 q.getConsensusEventStmt,
		getConsensusEventsByTypeStmt:          q.getConsensusEventsByTypeStmt,
		getConsensusEventsForHeightStmt:       q.getConsensusEventsForHeightStmt,
		getConsensusEventsForRoundStmt:        q.getConsensusEventsForRoundStmt,
		getHeightStmt:                         q.getHeightStmt,
		getHeightsStmt:                        q.getHeightsStmt,
		getLatestHeightStmt:                   q.getLatestHeightStmt,
		getRecentConsensusEventsStmt:          q.getRecentConsensusEventsStmt,
		getRecentRoundsStmt:                   q.getRecentRoundsStmt,
		getRoundStmt:                          q.getRoundStmt,
		getRoundsForHeightStmt:                q.getRoundsForHeightStmt,
		getRoundsInRangeStmt:                  q.getRoundsInRangeStmt,
		getValidatorStmt:                      q.getValidatorStmt,
		getValidatorSnapshotStmt:              q.getValidatorSnapshotStmt,
		getValidatorSnapshotsForHeightStmt:    q.getValidatorSnapshotsForHeightStmt,
		getValidatorSnapshotsForValidatorStmt: q.getValidatorSnapshotsForValidatorStmt,
		getValidatorsStmt:                     q.getValidatorsStmt,
		getValidatorsByHeightStmt:             q.getValidatorsByHeightStmt,
		getVoteStmt:                           q.getVoteStmt,
		getVotesByTypeStmt:                    q.getVotesByTypeStmt,
		getVotesForHeightStmt:                 q.getVotesForHeightStmt,
		getVotesForRoundStmt:                  q.getVotesForRoundStmt,
		getVotesForValidatorStmt:              q.getVotesForValidatorStmt,
		getVotingPowerForRoundStmt:            q.getVotingPowerForRoundStmt,
		updateRoundStepStmt:                   q.updateRoundStepStmt,
		updateValidatorStmt:                   q.updateValidatorStmt,
		upsertHeightStmt:                      q.upsertHeightStmt,
		upsertRoundStmt:                       q.upsertRoundStmt,
		upsertValidatorStmt:                   q.upsertValidatorStmt,
		upsertValidatorSnapshotStmt:           q.upsertValidatorSnapshotStmt,
		upsertVoteStmt:                        q.upsertVoteStmt,
	}
}
