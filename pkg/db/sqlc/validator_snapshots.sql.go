// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: validator_snapshots.sql

package sqlc

import (
	"context"
	"database/sql"
)

const batchCreateValidatorSnapshots = `-- name: BatchCreateValidatorSnapshots :exec
INSERT INTO validator_snapshots (height, validator_address, voting_power, voting_power_percent, is_proposer)
VALUES (?, ?, ?, ?, ?)
`

type BatchCreateValidatorSnapshotsParams struct {
	Height             int64           `json:"height"`
	ValidatorAddress   string          `json:"validator_address"`
	VotingPower        int64           `json:"voting_power"`
	VotingPowerPercent sql.NullFloat64 `json:"voting_power_percent"`
	IsProposer         sql.NullBool    `json:"is_proposer"`
}

func (q *Queries) BatchCreateValidatorSnapshots(ctx context.Context, arg BatchCreateValidatorSnapshotsParams) error {
	_, err := q.exec(ctx, q.batchCreateValidatorSnapshotsStmt, batchCreateValidatorSnapshots,
		arg.Height,
		arg.ValidatorAddress,
		arg.VotingPower,
		arg.VotingPowerPercent,
		arg.IsProposer,
	)
	return err
}

const createValidatorSnapshot = `-- name: CreateValidatorSnapshot :one
INSERT INTO validator_snapshots (height, validator_address, voting_power, voting_power_percent, is_proposer)
VALUES (?, ?, ?, ?, ?)
RETURNING id, height, validator_address, voting_power, voting_power_percent, is_proposer, created_at
`

type CreateValidatorSnapshotParams struct {
	Height             int64           `json:"height"`
	ValidatorAddress   string          `json:"validator_address"`
	VotingPower        int64           `json:"voting_power"`
	VotingPowerPercent sql.NullFloat64 `json:"voting_power_percent"`
	IsProposer         sql.NullBool    `json:"is_proposer"`
}

func (q *Queries) CreateValidatorSnapshot(ctx context.Context, arg CreateValidatorSnapshotParams) (ValidatorSnapshot, error) {
	row := q.queryRow(ctx, q.createValidatorSnapshotStmt, createValidatorSnapshot,
		arg.Height,
		arg.ValidatorAddress,
		arg.VotingPower,
		arg.VotingPowerPercent,
		arg.IsProposer,
	)
	var i ValidatorSnapshot
	err := row.Scan(
		&i.ID,
		&i.Height,
		&i.ValidatorAddress,
		&i.VotingPower,
		&i.VotingPowerPercent,
		&i.IsProposer,
		&i.CreatedAt,
	)
	return i, err
}

const deleteValidatorSnapshotsOlderThan = `-- name: DeleteValidatorSnapshotsOlderThan :exec
DELETE FROM validator_snapshots WHERE height < ?
`

func (q *Queries) DeleteValidatorSnapshotsOlderThan(ctx context.Context, height int64) error {
	_, err := q.exec(ctx, q.deleteValidatorSnapshotsOlderThanStmt, deleteValidatorSnapshotsOlderThan, height)
	return err
}

const getValidatorSnapshot = `-- name: GetValidatorSnapshot :one
SELECT id, height, validator_address, voting_power, voting_power_percent, is_proposer, created_at FROM validator_snapshots 
WHERE height = ? AND validator_address = ? 
LIMIT 1
`

type GetValidatorSnapshotParams struct {
	Height           int64  `json:"height"`
	ValidatorAddress string `json:"validator_address"`
}

func (q *Queries) GetValidatorSnapshot(ctx context.Context, arg GetValidatorSnapshotParams) (ValidatorSnapshot, error) {
	row := q.queryRow(ctx, q.getValidatorSnapshotStmt, getValidatorSnapshot, arg.Height, arg.ValidatorAddress)
	var i ValidatorSnapshot
	err := row.Scan(
		&i.ID,
		&i.Height,
		&i.ValidatorAddress,
		&i.VotingPower,
		&i.VotingPowerPercent,
		&i.IsProposer,
		&i.CreatedAt,
	)
	return i, err
}

const getValidatorSnapshotsForHeight = `-- name: GetValidatorSnapshotsForHeight :many
SELECT id, height, validator_address, voting_power, voting_power_percent, is_proposer, created_at FROM validator_snapshots 
WHERE height = ?
ORDER BY voting_power DESC
`

func (q *Queries) GetValidatorSnapshotsForHeight(ctx context.Context, height int64) ([]ValidatorSnapshot, error) {
	rows, err := q.query(ctx, q.getValidatorSnapshotsForHeightStmt, getValidatorSnapshotsForHeight, height)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ValidatorSnapshot{}
	for rows.Next() {
		var i ValidatorSnapshot
		if err := rows.Scan(
			&i.ID,
			&i.Height,
			&i.ValidatorAddress,
			&i.VotingPower,
			&i.VotingPowerPercent,
			&i.IsProposer,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidatorSnapshotsForValidator = `-- name: GetValidatorSnapshotsForValidator :many
SELECT id, height, validator_address, voting_power, voting_power_percent, is_proposer, created_at FROM validator_snapshots 
WHERE validator_address = ? AND height >= ?
ORDER BY height DESC
`

type GetValidatorSnapshotsForValidatorParams struct {
	ValidatorAddress string `json:"validator_address"`
	Height           int64  `json:"height"`
}

func (q *Queries) GetValidatorSnapshotsForValidator(ctx context.Context, arg GetValidatorSnapshotsForValidatorParams) ([]ValidatorSnapshot, error) {
	rows, err := q.query(ctx, q.getValidatorSnapshotsForValidatorStmt, getValidatorSnapshotsForValidator, arg.ValidatorAddress, arg.Height)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ValidatorSnapshot{}
	for rows.Next() {
		var i ValidatorSnapshot
		if err := rows.Scan(
			&i.ID,
			&i.Height,
			&i.ValidatorAddress,
			&i.VotingPower,
			&i.VotingPowerPercent,
			&i.IsProposer,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertValidatorSnapshot = `-- name: UpsertValidatorSnapshot :one
INSERT INTO validator_snapshots (height, validator_address, voting_power, voting_power_percent, is_proposer)
VALUES (?, ?, ?, ?, ?)
ON CONFLICT(height, validator_address) DO UPDATE SET
    voting_power = excluded.voting_power,
    voting_power_percent = excluded.voting_power_percent,
    is_proposer = excluded.is_proposer
RETURNING id, height, validator_address, voting_power, voting_power_percent, is_proposer, created_at
`

type UpsertValidatorSnapshotParams struct {
	Height             int64           `json:"height"`
	ValidatorAddress   string          `json:"validator_address"`
	VotingPower        int64           `json:"voting_power"`
	VotingPowerPercent sql.NullFloat64 `json:"voting_power_percent"`
	IsProposer         sql.NullBool    `json:"is_proposer"`
}

func (q *Queries) UpsertValidatorSnapshot(ctx context.Context, arg UpsertValidatorSnapshotParams) (ValidatorSnapshot, error) {
	row := q.queryRow(ctx, q.upsertValidatorSnapshotStmt, upsertValidatorSnapshot,
		arg.Height,
		arg.ValidatorAddress,
		arg.VotingPower,
		arg.VotingPowerPercent,
		arg.IsProposer,
	)
	var i ValidatorSnapshot
	err := row.Scan(
		&i.ID,
		&i.Height,
		&i.ValidatorAddress,
		&i.VotingPower,
		&i.VotingPowerPercent,
		&i.IsProposer,
		&i.CreatedAt,
	)
	return i, err
}
