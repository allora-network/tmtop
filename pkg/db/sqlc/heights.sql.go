// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: heights.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createHeight = `-- name: CreateHeight :one
INSERT INTO heights (height, block_hash, block_time, proposer_address, total_validators)
VALUES (?, ?, ?, ?, ?)
RETURNING height, block_hash, block_time, proposer_address, total_validators, created_at
`

type CreateHeightParams struct {
	Height          int64          `json:"height"`
	BlockHash       sql.NullString `json:"block_hash"`
	BlockTime       sql.NullTime   `json:"block_time"`
	ProposerAddress sql.NullString `json:"proposer_address"`
	TotalValidators sql.NullInt64  `json:"total_validators"`
}

func (q *Queries) CreateHeight(ctx context.Context, arg CreateHeightParams) (Height, error) {
	row := q.queryRow(ctx, q.createHeightStmt, createHeight,
		arg.Height,
		arg.BlockHash,
		arg.BlockTime,
		arg.ProposerAddress,
		arg.TotalValidators,
	)
	var i Height
	err := row.Scan(
		&i.Height,
		&i.BlockHash,
		&i.BlockTime,
		&i.ProposerAddress,
		&i.TotalValidators,
		&i.CreatedAt,
	)
	return i, err
}

const deleteHeightsOlderThan = `-- name: DeleteHeightsOlderThan :exec
DELETE FROM heights WHERE height < ?
`

func (q *Queries) DeleteHeightsOlderThan(ctx context.Context, height int64) error {
	_, err := q.exec(ctx, q.deleteHeightsOlderThanStmt, deleteHeightsOlderThan, height)
	return err
}

const getHeight = `-- name: GetHeight :one
SELECT height, block_hash, block_time, proposer_address, total_validators, created_at FROM heights WHERE height = ? LIMIT 1
`

func (q *Queries) GetHeight(ctx context.Context, height int64) (Height, error) {
	row := q.queryRow(ctx, q.getHeightStmt, getHeight, height)
	var i Height
	err := row.Scan(
		&i.Height,
		&i.BlockHash,
		&i.BlockTime,
		&i.ProposerAddress,
		&i.TotalValidators,
		&i.CreatedAt,
	)
	return i, err
}

const getHeights = `-- name: GetHeights :many
SELECT height, block_hash, block_time, proposer_address, total_validators, created_at FROM heights ORDER BY height DESC LIMIT ?
`

func (q *Queries) GetHeights(ctx context.Context, limit int64) ([]Height, error) {
	rows, err := q.query(ctx, q.getHeightsStmt, getHeights, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Height{}
	for rows.Next() {
		var i Height
		if err := rows.Scan(
			&i.Height,
			&i.BlockHash,
			&i.BlockTime,
			&i.ProposerAddress,
			&i.TotalValidators,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLatestHeight = `-- name: GetLatestHeight :one
SELECT height, block_hash, block_time, proposer_address, total_validators, created_at FROM heights ORDER BY height DESC LIMIT 1
`

func (q *Queries) GetLatestHeight(ctx context.Context) (Height, error) {
	row := q.queryRow(ctx, q.getLatestHeightStmt, getLatestHeight)
	var i Height
	err := row.Scan(
		&i.Height,
		&i.BlockHash,
		&i.BlockTime,
		&i.ProposerAddress,
		&i.TotalValidators,
		&i.CreatedAt,
	)
	return i, err
}

const upsertHeight = `-- name: UpsertHeight :one
INSERT INTO heights (height, block_hash, block_time, proposer_address, total_validators)
VALUES (?, ?, ?, ?, ?)
ON CONFLICT(height) DO UPDATE SET
    block_hash = excluded.block_hash,
    block_time = excluded.block_time,
    proposer_address = excluded.proposer_address,
    total_validators = excluded.total_validators
RETURNING height, block_hash, block_time, proposer_address, total_validators, created_at
`

type UpsertHeightParams struct {
	Height          int64          `json:"height"`
	BlockHash       sql.NullString `json:"block_hash"`
	BlockTime       sql.NullTime   `json:"block_time"`
	ProposerAddress sql.NullString `json:"proposer_address"`
	TotalValidators sql.NullInt64  `json:"total_validators"`
}

func (q *Queries) UpsertHeight(ctx context.Context, arg UpsertHeightParams) (Height, error) {
	row := q.queryRow(ctx, q.upsertHeightStmt, upsertHeight,
		arg.Height,
		arg.BlockHash,
		arg.BlockTime,
		arg.ProposerAddress,
		arg.TotalValidators,
	)
	var i Height
	err := row.Scan(
		&i.Height,
		&i.BlockHash,
		&i.BlockTime,
		&i.ProposerAddress,
		&i.TotalValidators,
		&i.CreatedAt,
	)
	return i, err
}
