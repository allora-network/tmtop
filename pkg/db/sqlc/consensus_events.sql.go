// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: consensus_events.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createConsensusEvent = `-- name: CreateConsensusEvent :one
INSERT INTO consensus_events (height, round_number, event_type, event_data, timestamp)
VALUES (?, ?, ?, ?, ?)
RETURNING id, height, round_number, event_type, event_data, timestamp, created_at
`

type CreateConsensusEventParams struct {
	Height      int64          `json:"height"`
	RoundNumber int64          `json:"round_number"`
	EventType   string         `json:"event_type"`
	EventData   sql.NullString `json:"event_data"`
	Timestamp   time.Time      `json:"timestamp"`
}

func (q *Queries) CreateConsensusEvent(ctx context.Context, arg CreateConsensusEventParams) (ConsensusEvent, error) {
	row := q.queryRow(ctx, q.createConsensusEventStmt, createConsensusEvent,
		arg.Height,
		arg.RoundNumber,
		arg.EventType,
		arg.EventData,
		arg.Timestamp,
	)
	var i ConsensusEvent
	err := row.Scan(
		&i.ID,
		&i.Height,
		&i.RoundNumber,
		&i.EventType,
		&i.EventData,
		&i.Timestamp,
		&i.CreatedAt,
	)
	return i, err
}

const deleteConsensusEventsOlderThan = `-- name: DeleteConsensusEventsOlderThan :exec
DELETE FROM consensus_events WHERE height < ?
`

func (q *Queries) DeleteConsensusEventsOlderThan(ctx context.Context, height int64) error {
	_, err := q.exec(ctx, q.deleteConsensusEventsOlderThanStmt, deleteConsensusEventsOlderThan, height)
	return err
}

const getConsensusEvent = `-- name: GetConsensusEvent :one
SELECT id, height, round_number, event_type, event_data, timestamp, created_at FROM consensus_events WHERE id = ? LIMIT 1
`

func (q *Queries) GetConsensusEvent(ctx context.Context, id int64) (ConsensusEvent, error) {
	row := q.queryRow(ctx, q.getConsensusEventStmt, getConsensusEvent, id)
	var i ConsensusEvent
	err := row.Scan(
		&i.ID,
		&i.Height,
		&i.RoundNumber,
		&i.EventType,
		&i.EventData,
		&i.Timestamp,
		&i.CreatedAt,
	)
	return i, err
}

const getConsensusEventsByType = `-- name: GetConsensusEventsByType :many
SELECT id, height, round_number, event_type, event_data, timestamp, created_at FROM consensus_events 
WHERE height >= ? AND event_type = ?
ORDER BY height DESC, round_number DESC, timestamp DESC
`

type GetConsensusEventsByTypeParams struct {
	Height    int64  `json:"height"`
	EventType string `json:"event_type"`
}

func (q *Queries) GetConsensusEventsByType(ctx context.Context, arg GetConsensusEventsByTypeParams) ([]ConsensusEvent, error) {
	rows, err := q.query(ctx, q.getConsensusEventsByTypeStmt, getConsensusEventsByType, arg.Height, arg.EventType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ConsensusEvent{}
	for rows.Next() {
		var i ConsensusEvent
		if err := rows.Scan(
			&i.ID,
			&i.Height,
			&i.RoundNumber,
			&i.EventType,
			&i.EventData,
			&i.Timestamp,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getConsensusEventsForHeight = `-- name: GetConsensusEventsForHeight :many
SELECT id, height, round_number, event_type, event_data, timestamp, created_at FROM consensus_events WHERE height = ? ORDER BY round_number, timestamp
`

func (q *Queries) GetConsensusEventsForHeight(ctx context.Context, height int64) ([]ConsensusEvent, error) {
	rows, err := q.query(ctx, q.getConsensusEventsForHeightStmt, getConsensusEventsForHeight, height)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ConsensusEvent{}
	for rows.Next() {
		var i ConsensusEvent
		if err := rows.Scan(
			&i.ID,
			&i.Height,
			&i.RoundNumber,
			&i.EventType,
			&i.EventData,
			&i.Timestamp,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getConsensusEventsForRound = `-- name: GetConsensusEventsForRound :many
SELECT id, height, round_number, event_type, event_data, timestamp, created_at FROM consensus_events 
WHERE height = ? AND round_number = ?
ORDER BY timestamp
`

type GetConsensusEventsForRoundParams struct {
	Height      int64 `json:"height"`
	RoundNumber int64 `json:"round_number"`
}

func (q *Queries) GetConsensusEventsForRound(ctx context.Context, arg GetConsensusEventsForRoundParams) ([]ConsensusEvent, error) {
	rows, err := q.query(ctx, q.getConsensusEventsForRoundStmt, getConsensusEventsForRound, arg.Height, arg.RoundNumber)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ConsensusEvent{}
	for rows.Next() {
		var i ConsensusEvent
		if err := rows.Scan(
			&i.ID,
			&i.Height,
			&i.RoundNumber,
			&i.EventType,
			&i.EventData,
			&i.Timestamp,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentConsensusEvents = `-- name: GetRecentConsensusEvents :many
SELECT id, height, round_number, event_type, event_data, timestamp, created_at FROM consensus_events ORDER BY timestamp DESC LIMIT ?
`

func (q *Queries) GetRecentConsensusEvents(ctx context.Context, limit int64) ([]ConsensusEvent, error) {
	rows, err := q.query(ctx, q.getRecentConsensusEventsStmt, getRecentConsensusEvents, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ConsensusEvent{}
	for rows.Next() {
		var i ConsensusEvent
		if err := rows.Scan(
			&i.ID,
			&i.Height,
			&i.RoundNumber,
			&i.EventType,
			&i.EventData,
			&i.Timestamp,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
